"""
Copyright 2022 Sony Semiconductor Solutions Corp. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""
# automatically generated by the FlatBuffers compiler, do not modify

# namespace: SmartCamera

import flatbuffers


class ObjectDetectionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsObjectDetectionData(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ObjectDetectionData()
        x.Init(buf, n + offset)
        return x

    # ObjectDetectionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ObjectDetectionData
    def ObjectDetectionList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .general_object import GeneralObject
            obj = GeneralObject()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ObjectDetectionData
    def ObjectDetectionListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0


def ObjectDetectionDataStart(builder): builder.StartObject(1)


def ObjectDetectionDataAddObjectDetectionList(builder, objectDetectionList): builder.PrependUOffsetTRelativeSlot(
    0, flatbuffers.number_types.UOffsetTFlags.py_type(objectDetectionList), 0)
def ObjectDetectionDataStartObjectDetectionListVector(
    builder, numElems): return builder.StartVector(4, numElems, 4)


def ObjectDetectionDataEnd(builder): return builder.EndObject()
